1). Write a function that takes a Set and a value as arguments. Check if the value is present in the Set

Test Cases:
myFunction(new Set([1, 2, 3]), 2)
Expected
true
myFunction(new Set([123]), 2)
Expected
false
myFunction(new Set(['1', '2', '3']), '2')
Expected
true
myFunction(new Set('123'), '2')
Expected
true

The author's solution

function myFunction(set, val) {
  return set.has(val);
}


2). Write a function that takes a Set as argument. Convert the Set to an Array. Return the Array

Test Cases:
myFunction(new Set([1, 2, 3]))
Expected
[1, 2, 3]
myFunction(new Set([123]))
Expected
[123]
myFunction(new Set(['1', '2', '3']))
Expected
['1', '2', '3']
myFunction(new Set('123'))
Expected
['1', '2', '3']

The author's solution

function myFunction(set) {
  return [...set];
}

function myFunction(set){
return Array.from(set);
}


3). Write a function that takes two Sets as arguments. Create the union of the two sets. Return the result. Tipp: try not to switch to Arrays, this would slow down your code


Test Cases:
myFunction(new Set('123'), new Set('234'))
Expected
new Set('1234')
myFunction(new Set([1, 2, 3]), new Set([3, 4, 5]))
Expected
new Set([1, 2, 3, 4, 5])
myFunction(new Set([false, false, NaN]), new Set([true, true, NaN]))
Expected
new Set([false, NaN, true])


function myFunction(a, b){
return new Set([...a, ...b]);
}

4). Write a function that takes three elements of any type as arguments. Create a Set from those elements. Return the result

Test Cases:
myFunction(1, 'b', 3)
Expected
new Set([1, 'b', 3])
myFunction(NaN, null, false)
Expected
new Set([NaN, null, false])
myFunction('a', ['b'], { c: 3 })
Expected
new Set(['a', ['b'], { c: 3 }])

The author's solution

function myFunction(a, b, c) {
  const set = new Set();
  set.add(a);
  set.add(b);
  set.add(c);
  return set;
}


5). Write a function that takes a Set and a value as argument. If existing in the Set, remove the value from the Set. Return the result
Test Cases:
myFunction(new Set([1, 2, 3]), 1)
Expected
new Set([2, 3])
myFunction(new Set('12345'), '3')
Expected
new Set(['1', '2', '4', '5'])
myFunction(new Set([1, 2, 3]), 4)
Expected
new Set([1, 2, 3])


The author's solution

function myFunction(set, val) {
  set.delete(val);
  return set;
}