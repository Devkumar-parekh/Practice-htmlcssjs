1). Sounds easy, but you need to know the trick. Write a function that takes two date instances as arguments. It should return true if the dates are equal. It should return false otherwise.


Test Cases:
myFunction(new Date('2000/01/01 08:00:00'), new Date('2000/01/01 08:45:00'))
Expected
false
myFunction(new Date('2000/01/01 08:00:00'), new Date('2000/01/01 08:00:00'))
Expected
true
myFunction(new Date('2001/01/01 08:00:00'), new Date('2000/01/01 08:00:00'))
Expected
false


The author's solution

function myFunction(a, b) {
     return a.getTime() === b.getTime()
}


function myFunction(a, b){
return Number(a)==Number(b);
}


2). Write a function that takes two date instances as argument. It should return the number of days that lies between those dates.

Test Cases:
myFunction(new Date('2020-06-11'), new Date('2020-06-01'))
Expected
10
myFunction(new Date('2000-01-01'), new Date('2020-06-01'))
Expected
7457

The author's solution

function myFunction(a, b) {
   const dif = Math.abs(a - b);
   return dif / 1000 / 60 / 60 / 24
}

function myFunction(a, b){
return Math.abs(Number(a)-Number(b))/(1000*3600*24)
}



3). Write a function that takes two date instances as argument. It should return true if they fall on the exact same day. It should return false otherwise.

Test Cases:
myFunction(new Date('2000/01/01'), new Date('2000/01/01'))
Expected
true 
myFunction(new Date('2000/01/01'), new Date('2000/01/02'))
Expected
false 
myFunction(new Date('2001/01/01'), new Date('2000/01/01'))
Expected
false 
myFunction(new Date('2000/11/01'), new Date('2000/01/01'))
Expected
false 


The author's solution

function myFunction(a, b) {
  return a.getFullYear() === b.getFullYear() &&
         a.getMonth() === b.getMonth() &&
         a.getDate()=== b.getDate()
}


function myFunction(a, b){
return a.getTime()===b.getTime();
}



4). Write a function that takes two date instances as argument. It should return true if the difference between the dates is less than or equal to 1 hour. It should return false otherwise.

Test Cases:
myFunction(new Date('2000/01/01 08:00:00'), new Date('2000/01/01 08:45:00'))
Expected
true 
myFunction(new Date('2000/01/01 09:00:00'), new Date('2000/01/01 08:45:00'))
Expected
true 
myFunction(new Date('2000/01/01 08:00:00'), new Date('2000/01/01 09:45:00'))
Expected
false 
myFunction(new Date('2000/01/01 08:00:00'), new Date('2000/01/01 09:00:00'))
Expected
true 


The author's solution

function myFunction(a, b) {
   return Math.abs(a - b) / 1000 / 60 <= 60
}

function myFunction(a, b){
return Math.abs(a.getTime()-b.getTime())<=3600*1000
}

5). Write a function that takes two date instances (a and b) as arguments. It should return true if a is earlier than b. It should return false otherwise.

The author's solution

function myFunction(a, b) {
   return a < b
}