1). Write a function that takes an object with two properties as argument. It should return the value of the property with key country.
Test Cases:
myFunction({ continent: 'Asia', country: 'Japan' })
Expected
'Japan'
myFunction({ country: 'Sweden', continent: 'Europe' })
Expected
'Sweden'

The author's solution

function myFunction(obj) {
  return obj.country
}
function myFunction(obj) {
  return obj['country']
}


2). Write a function that takes an object with two properties as argument. It should return the value of the property with key 'prop-2'. Tipp: you might want to use the square brackets property accessor
Test Cases:
myFunction({  one: 1,  'prop-2': 2})
Expected
2
myFunction({  'prop-2': 'two',  prop: 'test'})
Expected
'two'

The author's solution

function myFunction(obj) {
  return obj['prop-2']
}


3). Write a function that takes an object with two properties and a string as arguments. It should return the value of the property with key equal to the value of the string

Test Cases:
myFunction({  continent: 'Asia',  country: 'Japan'}, 'continent')
Expected
'Asia'
myFunction({  country: 'Sweden',  continent: 'Europe'}, 'country')
Expected
'Sweden'

The author's solution

function myFunction(obj, key) {
  return obj[key]
}

4). Write a function that takes an object (a) and a string (b) as argument. Return true if the object has a property with key 'b'. Return false otherwise. Tipp: test case 3 is a bit tricky because the value of property 'z' is undefined. But the property itself exists.

Test Cases:
myFunction({a:1,b:2,c:3},'b')
Expected
true
myFunction({x:'a',y:'b',z:'c'},'a')
Expected
false
myFunction({x:'a',y:'b',z:undefined},'z')
Expected
true

The author's solution

function myFunction(a, b) {
   return b in a;
}

function myFunction(a, b){
return Object.keys(a).includes(b);
}


5). Write a function that takes an object (a) and a string (b) as argument. Return true if the object has a property with key 'b', but only if it has a truthy value. In other words, it should not be null or undefined or false. Return false otherwise.

Test Cases:
myFunction({a:1,b:2,c:3},'b')
Expected
true
myFunction({x:'a',y:null,z:'c'},'y')
Expected
false
myFunction({x:'a',b:'b',z:undefined},'z')
Expected
false


The author's solution

function myFunction(a, b) {
   return Boolean(a[b]);
}


6). Write a function that takes a string as argument. Create an object that has a property with key 'key' and a value equal to the string. Return the object.

Test Cases:
myFunction('a')
Expected
{key:'a'}
myFunction('z')
Expected
{key:'z'}
myFunction('b')
Expected
{key:'b'}

The author's solution

function myFunction(a) {
   return { key: a };
}


7). Write a function that takes two strings (a and b) as arguments. Create an object that has a property with key 'a' and a value of 'b'. Return the object.

The author's solution

function myFunction(a, b) {
   return { [a]: b };
}



8). Write a function that takes two arrays (a and b) as arguments. Create an object that has properties with keys 'a' and corresponding values 'b'. Return the object.

Test Cases:
myFunction(['a','b','c'],[1,2,3])
Expected
{a:1,b:2,c:3}
myFunction(['w','x','y','z'],[10,9,5,2])
Expected
{w:10,x:9,y:5,z:2}
myFunction([1,'b'],['a',2])
Expected
{1:'a',b:2}


The author's solution

function myFunction(a, b) {
   return a.reduce((acc, cur, i) => ({ ...acc, [cur]: b[i] }), {});
}

function myFunction(a, b){
    const obj={};
    for(let i=0;i<a.length;i++){
        obj[[a[i]]] = b[i];
    }
    return obj;
}


9). Write a function that takes an object (a) as argument. Return an array with all object keys.

Test Cases:
myFunction({a:1,b:2,c:3})
Expected
['a','b','c']
myFunction({j:9,i:2,x:3,z:4})
Expected
['j','i','x','z']
myFunction({w:15,x:22,y:13})
Expected
['w','x','y']


function myFunction(a) {
   return Object.keys(a);
}


10). Write a function that takes an object as argument. In some cases the object contains other objects with some deeply nested properties. Return the property 'b' of object 'a' inside the original object if it exists. If not, return undefined

Test Cases:
myFunction({a:1})
Expected
undefined
myFunction({a:{b:{c:3}}})
Expected
{c:3}
myFunction({b:{a:1}})
Expected
undefined
myFunction({a:{b:2}})
Expected
2

The author's solution

function myFunction(obj) {
   return obj?.a?.b;
}


11). Write a function that takes an object (a) as argument. Return the sum of all object values.

Test Cases:
myFunction({a:1,b:2,c:3})
Expected
6
myFunction({j:9,i:2,x:3,z:4})
Expected
18
myFunction({w:15,x:22,y:13})
Expected
50

The author's solution

function myFunction(a) {
   return Object.values(a).reduce((sum, cur) => sum + cur, 0);
}

function myFunction(a){
let t=0;
Object.keys(a).map((k)=>{
   t += a[k];   
});
return t;
}



12). Write a function that takes an object as argument. It should return an object with all original object properties. except for the property with key 'b'

Test Cases:
myFunction({ a: 1, b: 7, c: 3 })
Expected
{ a: 1, c: 3 }
myFunction({ b: 0, a: 7, d: 8 })
Expected
{ a: 7, d: 8 }
myFunction({ e: 6, f: 4, b: 5, a: 3 })
Expected
{ e: 6, f: 4, a: 3 }

The author's solution

function myFunction(obj) {
  const { b, ...rest } = obj;
  return rest;
}

function myFunction(obj){
const newObj={};
Object.keys(obj).map((k)=>{
   if(k!=='b'){
      newObj[[k]] = obj[k];
   }   

});
return newObj;
}



13). Write a function that takes two objects as arguments. Unfortunately, the property 'b' in the second object has the wrong key. It should be named 'd' instead. Merge both objects and correct the wrong property name. Return the resulting object. It should have the properties 'a', 'b', 'c', 'd', and 'e'


Test Cases:
myFunction({ a: 1, b: 2 }, { c: 3, b: 4, e: 5 })
Expected
{ a: 1, b: 2, c: 3, e: 5, d: 4}
myFunction({ a: 5, b: 4 }, { c: 3, b: 1, e: 2 })
Expected
{ a: 5, b: 4, c: 3, e: 2, d: 1}



The author's solution

function myFunction(x, y) {
  const { b, ...rest } = y;
  return { ...x, ...rest, d: b };
}


function myFunction(x, y){
y['d'] = y['b'];
delete y['b'];
return {...x,...y};
}


14). Write a function that takes an object (a) and a number (b) as arguments. Multiply all values of 'a' by 'b'. Return the resulting object.

Test Cases:
myFunction({a:1,b:2,c:3},3)
Expected
{a:3,b:6,c:9}
myFunction({j:9,i:2,x:3,z:4},10)
Expected
{j:90,i:20,x:30,z:40}
myFunction({w:15,x:22,y:13},6)
Expected
{w:90,x:132,y:78}


The author's solution

function myFunction(a, b) {
   return Object.entries(a).reduce((acc, [key, val]) => {
   	return { ...acc, [key]: val * b };
   }, {});
}


function myFunction(a, b){
Object.keys(a).map((k)=>{
   a[k] *= b;    
});
return a;
}
